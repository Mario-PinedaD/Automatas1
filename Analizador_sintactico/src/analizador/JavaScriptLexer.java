/* JavaScriptLexer.java */
/* Generated By:JavaCC: Do not edit this line. JavaScriptLexer.java */
/** Analizador de un subconjunto del lenguaje JavaScript. */
package analizador;

public class JavaScriptLexer implements JavaScriptLexerConstants {
  public static void main(String[] args) throws ParseException {
    JavaScriptLexer lexer = new JavaScriptLexer(System.in);
    lexer.Program();
  }

/** Reglas de producci√≥n */
  final public void Program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSOLE:
      case CONST:
      case FOR:
      case FUNCTION:
      case IF:
      case LET:
      case RETURN:
      case VAR:
      case WHILE:
      case IDENTIFICADOR:
      case INT:
      case FLOAT:
      case STRING:
      case PARENTESIS_I:
      case MAS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
    jj_consume_token(0);
}

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONST:
    case LET:
    case VAR:{
      VarDeclaracion();
      break;
      }
    case IF:{
      IfStatement();
      break;
      }
    case WHILE:{
      WhileStatement();
      break;
      }
    case FOR:{
      ForBucle();
      break;
      }
    case RETURN:{
      ReturnStatement();
      break;
      }
    case IDENTIFICADOR:
    case INT:
    case FLOAT:
    case STRING:
    case PARENTESIS_I:
    case MAS:
    case MENOS:{
      ExpressionStatement();
      break;
      }
    case FUNCTION:{
      FunDeclaracion();
      break;
      }
    case CONSOLE:{
      ConsoleStatement();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//Declaracion de una variable ---------
  final public void VarDeclaracion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      jj_consume_token(VAR);
      break;
      }
    case LET:{
      jj_consume_token(LET);
      break;
      }
    case CONST:{
      jj_consume_token(CONST);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        LlamarFuncion();
        break;
        }
      case INT:
      case FLOAT:
      case STRING:{
        DatosBasicos();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(PUNTO_Y_COMA);
}

  final public void LlamarFuncion() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENTESIS_I);
    ParameterList();
    jj_consume_token(PARENTESIS_D);
}

  final public void FunDeclaracion() throws ParseException {
    jj_consume_token(FUNCTION);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENTESIS_I);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      ParameterList();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(PARENTESIS_D);
    Block();
}

  final public void ParameterList() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMA);
      jj_consume_token(IDENTIFICADOR);
    }
}

  final public void Block() throws ParseException {
    jj_consume_token(LLAVE_IZQ);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSOLE:
      case CONST:
      case FOR:
      case FUNCTION:
      case IF:
      case LET:
      case RETURN:
      case VAR:
      case WHILE:
      case IDENTIFICADOR:
      case INT:
      case FLOAT:
      case STRING:
      case PARENTESIS_I:
      case MAS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      Statement();
    }
    jj_consume_token(LLAVE_DER);
}

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PARENTESIS_I);
    Expression();
    jj_consume_token(PARENTESIS_D);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      Statement();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
}

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(PARENTESIS_I);
    Expression();
    jj_consume_token(PARENTESIS_D);
    Statement();
}

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(PARENTESIS_I);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONST:
    case LET:
    case VAR:{
      VarDeclaracion();
      break;
      }
    case IDENTIFICADOR:
    case INT:
    case FLOAT:
    case STRING:
    case PARENTESIS_I:
    case PUNTO_Y_COMA:
    case MAS:
    case MENOS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:
      case INT:
      case FLOAT:
      case STRING:
      case PARENTESIS_I:
      case MAS:
      case MENOS:{
        Expression();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(PUNTO_Y_COMA);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:
    case INT:
    case FLOAT:
    case STRING:
    case PARENTESIS_I:
    case MAS:
    case MENOS:{
      Expression();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(PUNTO_Y_COMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:
    case INT:
    case FLOAT:
    case STRING:
    case PARENTESIS_I:
    case MAS:
    case MENOS:{
      Expression();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(PARENTESIS_D);
    Statement();
}

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:
    case INT:
    case FLOAT:
    case STRING:
    case PARENTESIS_I:
    case MAS:
    case MENOS:{
      Expression();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(PUNTO_Y_COMA);
}

//Pa que chambee el console.log
  final public void ConsoleStatement() throws ParseException {
    jj_consume_token(CONSOLE);
    jj_consume_token(PUNTO);
    jj_consume_token(LOG);
    jj_consume_token(PARENTESIS_I);
    Contenido();
    jj_consume_token(PARENTESIS_D);
    jj_consume_token(PUNTO_Y_COMA);
}

//El contenido del console.log
  final public void Contenido() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:
      case INT:
      case FLOAT:
      case STRING:
      case COMA:
      case MAS:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:
      case INT:
      case FLOAT:
      case STRING:{
        DatosBasicos();
        break;
        }
      case COMA:
      case MAS:{
        Concatenation();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Concatenation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      DatosBasicos();
      break;
      }
    case MAS:{
      jj_consume_token(MAS);
      DatosBasicos();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ExpressionStatement() throws ParseException {
    Expression();
    jj_consume_token(PUNTO_Y_COMA);
}

  final public void Expression() throws ParseException {
    AssignmentExpression();
}

  final public void AssignmentExpression() throws ParseException {
    ConditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      AssignmentExpression();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
}

  final public void ConditionalExpression() throws ParseException {
    OrExpression();
}

  final public void OrExpression() throws ParseException {
    AndExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR_LOGICO:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR_LOGICO);
      AndExpression();
    }
}

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND_LOGICO:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND_LOGICO);
      EqualityExpression();
    }
}

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ES_IGUAL:
      case NO_ES_IGUAL:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ES_IGUAL:{
        jj_consume_token(ES_IGUAL);
        break;
        }
      case NO_ES_IGUAL:{
        jj_consume_token(NO_ES_IGUAL);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RelationalExpression();
    }
}

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENOR:
      case MAYOR:
      case MENOR_IGUAL_QUE:
      case MAYOR_IGUAL_QUE:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case MAYOR:{
        jj_consume_token(MAYOR);
        break;
        }
      case MENOR_IGUAL_QUE:{
        jj_consume_token(MENOR_IGUAL_QUE);
        break;
        }
      case MAYOR_IGUAL_QUE:{
        jj_consume_token(MAYOR_IGUAL_QUE);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
}

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        jj_consume_token(MAS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
}

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:{
        jj_consume_token(MULT);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
}

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAS:{
      jj_consume_token(MAS);
      UnaryExpression();
      break;
      }
    case MENOS:{
      jj_consume_token(MENOS);
      UnaryExpression();
      break;
      }
    case IDENTIFICADOR:
    case INT:
    case FLOAT:
    case STRING:
    case PARENTESIS_I:{
      PrimaryExpression();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case PARENTESIS_I:{
      jj_consume_token(PARENTESIS_I);
      Expression();
      jj_consume_token(PARENTESIS_D);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//Falta checar bien lo de For
  final public 
void DatosBasicos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// Bucle for
  final public void ForBucle() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(PARENTESIS_I);
    ContenidoFor();
    jj_consume_token(PARENTESIS_D);
    Block();
    jj_consume_token(PUNTO_Y_COMA);
}

//Lo que va dentro del for
  final public void ContenidoFor() throws ParseException {
    ForInicial();
    jj_consume_token(PUNTO_Y_COMA);
    ForCondicion();
    jj_consume_token(PUNTO_Y_COMA);
    ForFinal();
}

//si se  inicializa una variable o nel
  final public void ForInicial() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:
    case IDENTIFICADOR:{
      DeclaracionFor();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
}

//La condici√≥n que se debe cumplir
  final public void ForCondicion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      CondicionalesAsignacion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case INT:
    case FLOAT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      CondicionalesAsignacion();
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ForFinal() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCREMENTO:{
      jj_consume_token(INCREMENTO);
      break;
      }
    case DECREMENTO:{
      jj_consume_token(DECREMENTO);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void DeclaracionFor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:{
      jj_consume_token(LET);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IGUAL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void CondicionalesAsignacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ES_IGUAL:{
      jj_consume_token(ES_IGUAL);
      break;
      }
    case NO_ES_IGUAL:{
      jj_consume_token(NO_ES_IGUAL);
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
      break;
      }
    case MAYOR:{
      jj_consume_token(MAYOR);
      break;
      }
    case MENOR_IGUAL_QUE:{
      jj_consume_token(MENOR_IGUAL_QUE);
      break;
      }
    case MAYOR_IGUAL_QUE:{
      jj_consume_token(MAYOR_IGUAL_QUE);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public JavaScriptLexerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x7003000,0x7003000,0x2000,0x0,0x0,0x0,0x0,0x7003000,0x40000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x7ca0101,0x7ca0101,0x20001,0x3c00000,0x0,0x400000,0x0,0x7ca0101,0x0,0x7c00000,0x7c20001,0x7c00000,0x7c00000,0x7c00000,0x3c00000,0x3c00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c00000,0x7c00000,0x3c00000,0x400001,0x1c00000,0x1c00000,0x1c00000,0x0,0x1,0x1c00000,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x18,0x18,0x0,0x0,0x100,0x0,0x2,0x18,0x0,0x18,0x19,0x18,0x18,0x18,0xa,0xa,0xa,0x100,0x10000000,0x8000000,0x180000,0x180000,0x1e00000,0x1e00000,0x18,0x18,0xe0,0xe0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f80000,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public JavaScriptLexer(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaScriptLexer(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JavaScriptLexerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JavaScriptLexer(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JavaScriptLexerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JavaScriptLexerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JavaScriptLexer(JavaScriptLexerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavaScriptLexerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[100];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 39; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 100; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
