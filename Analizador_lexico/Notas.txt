Puntos de ayuda
1.- Los tokens no se separan por puntos.
Es decir: debemos leer caracter por caracter, es decir, por ejemplo "i = a + b * c; " nos debería devolver los tokens de

para los strings por ejemplo, tambien debemos considerar las comillas

El analizador estará basado en el sistema de Javascript:
Palabras reservadas:

await,break,case,catch,class,const,continue,debugger,default,delete,do,else,enum,export,extends,finally,for,function,if,implements
,import,in,instanceof,interface,let,new,package,private,protected,public,return,static,super,switch,this,throw,try,typeof,var        void
,while      with       yield

Parte String: (?<!\\)

# tokens_regex = {
#     'IDENTIFICADOR': r'[a-zA-Z_][a-zA-Z0-9_]*',
#     'NUMERO_ENTERO': r'\b\d+\b',
#     'NUMERO_FLOTANTE': r'\b\d+\.\d+\b',
#     'OPERADOR': r'[-+*/%&|=<>!^~?:]',
#     'PARENTESIS_IZQUIERDO': r'\(',
#     'PARENTESIS_DERECHO': r'\)',
#     'LLAVE_IZQUIERDA': r'\{',
#     'LLAVE_DERECHA': r'\}',
#     'CORCHETE_IZQUIERDO': r'\[',
#     'CORCHETE_DERECHO': r'\]',
#     'PUNTO_Y_COMA': r';',
#     'COMA': r',',
#     'PUNTO': r'\.',
#     'COMILLA_SIMPLE': r'\'',
#     'COMILLA_DOBLE': r'\"',
#     'ASIGNACION': r'=',
#     'INCREMENTO': r'\+\+',
#     'DECREMENTO': r'--',
#     'MAYOR_QUE': r'>',
#     'MENOR_QUE': r'<',
#     'MAYOR_IGUAL_QUE': r'>=',
#     'MENOR_IGUAL_QUE': r'<=',
#     'IGUAL_QUE': r'==',
#     'DIFERENTE_DE': r'!=',
#     'AND_LOGICO': r'&&',
#     'OR_LOGICO': r'\|\|',
#     'NOT_LOGICO': r'!',
#     'AND_BIT_A_BIT': r'&',
#     'OR_BIT_A_BIT': r'\|',
#     'XOR_BIT_A_BIT': r'\^',
#     'NOT_BIT_A_BIT': r'~',
#     'SHIFT_IZQUIERDA': r'<<',
#     'SHIFT_DERECHA': r'>>',
#     'COMENTARIO_UNA_LINEA': r'//.*?$',
#     'COMENTARIO_MULTI_LINEA': r'/\*.*?\*/',
#     'ESPACIO': r'\s+'
# }

codigo 1:
import re

# Definición de palabras reservadas de JavaScript
palabras_reservadas = {
    'await', 'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger',
    'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'finally',
    'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface',
    'let', 'new', 'package', 'private', 'protected', 'public', 'return', 'static',
    'super', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield'
}

# Definición de tokens con expresiones regulares para JavaScript
tokens_al = {
    'IDENTIFICADOR': r'[a-zA-Z_]\w*',
    'NUMERO': r'\b\d+(\.\d+)?\b',
    'OPERADOR': r'[-+*/%&|=<>!^~?:]',
    'PARENTESIS': r'[()\[\]{}]',
    'PUNTO_Y_COMA': r';',
    'COMA': r',',
    'PUNTO': r'\.',
    'COMILLA_SIMPLE': r'\'',
    'COMILLA_DOBLE': r'\"',
    'ASIGNACION': r'=',
    'INCREMENTO': r'\+\+',
    'DECREMENTO': r'--',
    'COMENTARIO_UNA_LINEA': r'//.*?$',
    'COMENTARIO_MULTI_LINEA': r'/\*.*?\*/',
    'ESPACIO': r'\s+'
}


def analizador_lexico(codigo):
    tokens = []  # Lista para almacenar los tokens encontrados
    posicion = 0  # Posición actual en el código

    while codigo:
        codigo = codigo.lstrip()  # Eliminar espacios en blanco al principio
        if not codigo:
            break  # Salir si no hay más código después de los espacios en blanco

        coincidencia = None
        for tipo_token, patron in tokens_al.items():
            regex = re.compile(patron)
            coincidencia = regex.match(codigo)
            if coincidencia:
                valor = coincidencia.group(0)
                if tipo_token == 'IDENTIFICADOR' and valor in palabras_reservadas:
                    tipo_token = 'PALABRA_RESERVADA'  # Cambiar el tipo a 'PALABRA_RESERVADA' si el identificador es una palabra reservada
                # Agregar el token a la lista con su tipo, valor y posición inicial y final
                tokens.append((tipo_token, valor, posicion + coincidencia.start(), posicion + coincidencia.end() - 1))
                posicion += coincidencia.end()  # Actualizar la posición para el próximo análisis
                codigo = codigo[coincidencia.end():]  # Actualizar el código restante
                break

        if not coincidencia:
            # Si no hay coincidencia, significa que hay un carácter inesperado
            print("El parametro introducido no está dentro del lenguaje especificado")
            codigo = codigo[1:]
            posicion += 1

    return tokens

# Ejemplo de uso
codigo = """
let x = 10;
if (x === 10) {
    console.log("El valor de x es 10");
} else {
    console.log("El valor de x no es 10");
}
#Esto es una prueba
print("Hola Mundo!")
for i in range(5):
    print(i)
"""

codigo2 = """
// Operación de suma
function suma(a, b) {
    return a + b;
}

// Operación de resta
function resta(a, b) {
    return a - b;
}

// Operación de multiplicación
function multiplicacion(a, b) {
    return a * b;
}

// Operación de división
function division(a, b) {
    if (b !== 0) {
        return a / b;
    } else {
        return "No se puede dividir entre cero";
    }
}
"""
tokens_encontrados = analizador_lexico(codigo)
for token in tokens_encontrados:
    print(token)

código 2:

import lex

# Definición de palabras reservadas de JavaScript
palabras_reservadas = {
    'await', 'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger',
    'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'finally',
    'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface',
    'let', 'new', 'package', 'private', 'protected', 'public', 'return', 'static',
    'super', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield'
}

# Definición de tokens con expresiones regulares para JavaScript
tokens = (
    'IDENTIFICADOR',
    'PALABRA_RESERVADA',
    'NUMERO',
    'OPERADOR',
    'PARENTESIS',
    'PUNTO_Y_COMA',
    'COMA',
    'PUNTO',
    'COMILLA_SIMPLE',
    'COMILLA_DOBLE',
    'ASIGNACION',
    'INCREMENTO',
    'DECREMENTO',
    'COMENTARIO_UNA_LINEA',
    'COMENTARIO_MULTI_LINEA',
    'ESPACIO'
)

# Expresiones regulares para tokens
t_IDENTIFICADOR = r'[a-zA-Z_]\w*'
t_NUMERO = r'\b\d+(\.\d+)?\b'
t_OPERADOR = r'[-+*/%&|=<>!^~?:]'
t_PARENTESIS = r'[()\[\]{}]'
t_PUNTO_Y_COMA = r';'
t_COMA = r','
t_PUNTO = r'\.'
t_COMILLA_SIMPLE = r'\''
t_COMILLA_DOBLE = r'\"'
t_ASIGNACION = r'='
t_INCREMENTO = r'\+\+'
t_DECREMENTO = r'--'
t_COMENTARIO_UNA_LINEA = r'//.*?$'
t_COMENTARIO_MULTI_LINEA = r'/\*.*?\*/'
t_ESPACIO = r'\s+'

# Función para manejar errores de tokens
def t_error(t):
    print("Caracter ilegal '%s'" % t.value[0])
    t.lexer.skip(1)

# Ignorar tabulaciones y saltos de línea
def t_newline(t):
    r'\n+'
    t.lexer.lineno += len(t.value)

# Agregar palabras reservadas como tokens de PALABRA_RESERVADA
def t_IDENTIFICADOR(t):
    r'[a-zA-Z_]\w*'
    if t.value in palabras_reservadas:
        t.type = 'PALABRA_RESERVADA'
    return t

# Construir el lexer
lexer = lex.lex()

# Función para probar el lexer
def main():
    # Ejemplo de código JavaScript
    codigo = """
    let x = 10;
    if (x === 10) {
        console.log("El valor de x es 10");
    } else {
        console.log("El valor de x no es 10");
    }
    """

    # Pasar el código al lexer
    lexer.input(codigo)

    # Imprimir los tokens encontrados
    for tok in lexer:
        print(tok)

if __name__ == '__main__':
    main()


----
#
def t_IDENTIFICADOR(t):
    r'[a-zA-Z_$][a-zA-Z_0-9$]*'
    if t.value.lower() in reservadas:
        t.type = 'RESERVADAS'
    else:
        t.type = 'IDENTIFICADOR'
    return t
###

"""
Este funciona pero para reconocer todo, desde el inicio hasta el fin
def t_error(t):
    print("Caracter invalido '%s'" % t.value + ", en la linea: " + str(t.lexer.lineno))
    t.lexer.lineno += len(t.value)
    t.lexer.skip(len(t.value) + 1)
    #sys.exit(1)
"""